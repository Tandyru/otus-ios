/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.GeoApi
import org.openapitools.client.models.BaseResponse
import org.openapitools.client.models.CountriesResponse
import org.openapitools.client.models.CountryResponse
import org.openapitools.client.models.DateTimeResponse
import org.openapitools.client.models.DistanceResponse
import org.openapitools.client.models.PopulatedPlaceResponse
import org.openapitools.client.models.PopulatedPlacesResponse
import org.openapitools.client.models.RegionResponse
import org.openapitools.client.models.RegionsResponse
import org.openapitools.client.models.TimeResponse

class GeoApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of GeoApi
        //val apiInstance = GeoApi()

        // to test findAdminDivisionsUsingGET
        should("test findAdminDivisionsUsingGET") {
            // uncomment below to test findAdminDivisionsUsingGET
            //val location : kotlin.String = location_example // kotlin.String | Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findAdminDivisionsUsingGET(location, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findCitiesNearAdminDivisionUsingGET
        should("test findCitiesNearAdminDivisionUsingGET") {
            // uncomment below to test findCitiesNearAdminDivisionUsingGET
            //val divisionId : kotlin.String = divisionId_example // kotlin.String | An admin-division id (either native 'id' or 'wikiDataId')
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only cities for these types (comma-delimited): ADM2 | CITY
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findCitiesNearAdminDivisionUsingGET(divisionId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findCitiesNearCityUsingGET
        should("test findCitiesNearCityUsingGET") {
            // uncomment below to test findCitiesNearCityUsingGET
            //val cityId : kotlin.String = cityId_example // kotlin.String | A city id (either native 'id' or 'wikiDataId')
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only cities for these types (comma-delimited): ADM2 | CITY
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findCitiesNearCityUsingGET(cityId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findCitiesNearLocationUsingGET
        should("test findCitiesNearLocationUsingGET") {
            // uncomment below to test findCitiesNearLocationUsingGET
            //val locationId : kotlin.String = locationId_example // kotlin.String | A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only cities for these types (comma-delimited): ADM2 | CITY
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findCitiesNearLocationUsingGET(locationId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findCitiesUsingGET
        should("test findCitiesUsingGET") {
            // uncomment below to test findCitiesUsingGET
            //val location : kotlin.String = location_example // kotlin.String | Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only cities for these types (comma-delimited): ADM2 | CITY
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findCitiesUsingGET(location, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findCountryPlacesUsingGET
        should("test findCountryPlacesUsingGET") {
            // uncomment below to test findCountryPlacesUsingGET
            //val countryId : kotlin.String = countryId_example // kotlin.String | An ISO-3166 country code or WikiData id
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findCountryPlacesUsingGET(countryId, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findDivisionsNearAdminDivisionUsingGET
        should("test findDivisionsNearAdminDivisionUsingGET") {
            // uncomment below to test findDivisionsNearAdminDivisionUsingGET
            //val divisionId : kotlin.String = divisionId_example // kotlin.String | An admin-division id (either native 'id' or 'wikiDataId')
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findDivisionsNearAdminDivisionUsingGET(divisionId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findDivisionsNearCityUsingGET
        should("test findDivisionsNearCityUsingGET") {
            // uncomment below to test findDivisionsNearCityUsingGET
            //val cityId : kotlin.String = cityId_example // kotlin.String | A city id (either native 'id' or 'wikiDataId')
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findDivisionsNearCityUsingGET(cityId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findDivisionsNearLocationUsingGET
        should("test findDivisionsNearLocationUsingGET") {
            // uncomment below to test findDivisionsNearLocationUsingGET
            //val locationId : kotlin.String = locationId_example // kotlin.String | A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findDivisionsNearLocationUsingGET(locationId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findPlacesNearAdminDivisionUsingGET
        should("test findPlacesNearAdminDivisionUsingGET") {
            // uncomment below to test findPlacesNearAdminDivisionUsingGET
            //val divisionId : kotlin.String = divisionId_example // kotlin.String | An admin-division id (either native 'id' or 'wikiDataId')
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findPlacesNearAdminDivisionUsingGET(divisionId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findPlacesNearCityUsingGET
        should("test findPlacesNearCityUsingGET") {
            // uncomment below to test findPlacesNearCityUsingGET
            //val cityId : kotlin.String = cityId_example // kotlin.String | A city id (either native 'id' or 'wikiDataId')
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findPlacesNearCityUsingGET(cityId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findPlacesNearLocationUsingGET
        should("test findPlacesNearLocationUsingGET") {
            // uncomment below to test findPlacesNearLocationUsingGET
            //val locationId : kotlin.String = locationId_example // kotlin.String | A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findPlacesNearLocationUsingGET(locationId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findPlacesNearPlaceUsingGET
        should("test findPlacesNearPlaceUsingGET") {
            // uncomment below to test findPlacesNearPlaceUsingGET
            //val placeId : kotlin.String = placeId_example // kotlin.String | A place id (either native 'id' or 'wikiDataId')
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findPlacesNearPlaceUsingGET(placeId, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findPlacesUsingGET
        should("test findPlacesUsingGET") {
            // uncomment below to test findPlacesUsingGET
            //val location : kotlin.String = location_example // kotlin.String | Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
            //val radius : kotlin.Int = 56 // kotlin.Int | The location radius within which to find places
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val countryIds : kotlin.String = countryIds_example // kotlin.String | Only places in these countries (comma-delimited country codes or WikiData ids)
            //val excludedCountryIds : kotlin.String = excludedCountryIds_example // kotlin.String | Only places NOT in these countries (comma-delimited country codes or WikiData ids)
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD = countryCode | elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findPlacesUsingGET(location, radius, distanceUnit, countryIds, excludedCountryIds, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findRegionCitiesUsingGET
        should("test findRegionCitiesUsingGET") {
            // uncomment below to test findRegionCitiesUsingGET
            //val countryId : kotlin.String = countryId_example // kotlin.String | An ISO-3166 country code or WikiData id
            //val regionCode : kotlin.String = regionCode_example // kotlin.String | An ISO-3166 or FIPS region code
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only cities for these types (comma-delimited): ADM2 | CITY
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findRegionCitiesUsingGET(countryId, regionCode, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findRegionDivisionsUsingGET
        should("test findRegionDivisionsUsingGET") {
            // uncomment below to test findRegionDivisionsUsingGET
            //val countryId : kotlin.String = countryId_example // kotlin.String | An ISO-3166 country code or WikiData id
            //val regionCode : kotlin.String = regionCode_example // kotlin.String | An ISO-3166 or FIPS region code
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findRegionDivisionsUsingGET(countryId, regionCode, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test findRegionPlacesUsingGET
        should("test findRegionPlacesUsingGET") {
            // uncomment below to test findRegionPlacesUsingGET
            //val countryId : kotlin.String = countryId_example // kotlin.String | An ISO-3166 country code or WikiData id
            //val regionCode : kotlin.String = regionCode_example // kotlin.String | An ISO-3166 or FIPS region code
            //val minPopulation : kotlin.Int = 56 // kotlin.Int | Only places having at least this population
            //val maxPopulation : kotlin.Int = 56 // kotlin.Int | Only places having no more than this population
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val timeZoneIds : kotlin.String = timeZoneIds_example // kotlin.String | Only places in these time-zones (comma-delimited)
            //val types : kotlin.String = types_example // kotlin.String | Only places for these types (comma-delimited): ADM2 | CITY | ISLAND
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort place results.  'Format: ±SORT_FIELD,±SORT_FIELD'  where SORT_FIELD = elevation | name | population 
            //val includeDeleted : kotlin.String = includeDeleted_example // kotlin.String | Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
            //val result : PopulatedPlacesResponse = apiInstance.findRegionPlacesUsingGET(countryId, regionCode, minPopulation, maxPopulation, namePrefix, namePrefixDefaultLangResults, timeZoneIds, types, asciiMode, hateoasMode, languageCode, limit, offset, sort, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test getAdminDivisionUsingGET
        should("test getAdminDivisionUsingGET") {
            // uncomment below to test getAdminDivisionUsingGET
            //val divisionId : kotlin.String = divisionId_example // kotlin.String | An admin-division id (either native 'id' or 'wikiDataId')
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val result : PopulatedPlaceResponse = apiInstance.getAdminDivisionUsingGET(divisionId, asciiMode, languageCode)
            //result shouldBe ("TODO")
        }

        // to test getCityDateTimeUsingGET
        should("test getCityDateTimeUsingGET") {
            // uncomment below to test getCityDateTimeUsingGET
            //val cityId : kotlin.String = cityId_example // kotlin.String | A city id (either native 'id' or 'wikiDataId')
            //val result : DateTimeResponse = apiInstance.getCityDateTimeUsingGET(cityId)
            //result shouldBe ("TODO")
        }

        // to test getCityDistanceUsingGET
        should("test getCityDistanceUsingGET") {
            // uncomment below to test getCityDistanceUsingGET
            //val cityId : kotlin.String = cityId_example // kotlin.String | A city id (either native 'id' or 'wikiDataId')
            //val toCityId : kotlin.String = toCityId_example // kotlin.String | Distance to this city
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val result : DistanceResponse = apiInstance.getCityDistanceUsingGET(cityId, toCityId, distanceUnit)
            //result shouldBe ("TODO")
        }

        // to test getCityLocatedInUsingGET
        should("test getCityLocatedInUsingGET") {
            // uncomment below to test getCityLocatedInUsingGET
            //val cityId : kotlin.String = cityId_example // kotlin.String | A city id (either native 'id' or 'wikiDataId')
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val result : PopulatedPlaceResponse = apiInstance.getCityLocatedInUsingGET(cityId, asciiMode, languageCode)
            //result shouldBe ("TODO")
        }

        // to test getCityTimeUsingGET
        should("test getCityTimeUsingGET") {
            // uncomment below to test getCityTimeUsingGET
            //val cityId : kotlin.String = cityId_example // kotlin.String | A city id (either native 'id' or 'wikiDataId')
            //val result : TimeResponse = apiInstance.getCityTimeUsingGET(cityId)
            //result shouldBe ("TODO")
        }

        // to test getCityUsingGET
        should("test getCityUsingGET") {
            // uncomment below to test getCityUsingGET
            //val cityId : kotlin.String = cityId_example // kotlin.String | A city id (either native 'id' or 'wikiDataId')
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val result : PopulatedPlaceResponse = apiInstance.getCityUsingGET(cityId, asciiMode, languageCode)
            //result shouldBe ("TODO")
        }

        // to test getCountriesUsingGET
        should("test getCountriesUsingGET") {
            // uncomment below to test getCountriesUsingGET
            //val currencyCode : kotlin.String = currencyCode_example // kotlin.String | Only countries supporting this currency
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort countries.  Format: ±SORT_FIELD  where SORT_FIELD = code | name
            //val result : CountriesResponse = apiInstance.getCountriesUsingGET(currencyCode, namePrefix, namePrefixDefaultLangResults, asciiMode, hateoasMode, languageCode, limit, offset, sort)
            //result shouldBe ("TODO")
        }

        // to test getCountryUsingGET
        should("test getCountryUsingGET") {
            // uncomment below to test getCountryUsingGET
            //val countryId : kotlin.String = countryId_example // kotlin.String | An ISO-3166 country code or WikiData id
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val result : CountryResponse = apiInstance.getCountryUsingGET(countryId, asciiMode, languageCode)
            //result shouldBe ("TODO")
        }

        // to test getPlaceDateTimeUsingGET
        should("test getPlaceDateTimeUsingGET") {
            // uncomment below to test getPlaceDateTimeUsingGET
            //val placeId : kotlin.String = placeId_example // kotlin.String | A place id (either native 'id' or 'wikiDataId')
            //val result : DateTimeResponse = apiInstance.getPlaceDateTimeUsingGET(placeId)
            //result shouldBe ("TODO")
        }

        // to test getPlaceDistanceUsingGET
        should("test getPlaceDistanceUsingGET") {
            // uncomment below to test getPlaceDistanceUsingGET
            //val placeId : kotlin.String = placeId_example // kotlin.String | A place id (either native 'id' or 'wikiDataId')
            //val toPlaceId : kotlin.String = toPlaceId_example // kotlin.String | Distance to this place
            //val distanceUnit : kotlin.String = distanceUnit_example // kotlin.String | The unit of distance: MI | KM
            //val result : DistanceResponse = apiInstance.getPlaceDistanceUsingGET(placeId, toPlaceId, distanceUnit)
            //result shouldBe ("TODO")
        }

        // to test getPlaceLocatedInUsingGET
        should("test getPlaceLocatedInUsingGET") {
            // uncomment below to test getPlaceLocatedInUsingGET
            //val placeId : kotlin.String = placeId_example // kotlin.String | A place id (either native 'id' or 'wikiDataId')
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val result : PopulatedPlaceResponse = apiInstance.getPlaceLocatedInUsingGET(placeId, asciiMode, languageCode)
            //result shouldBe ("TODO")
        }

        // to test getPlaceTimeUsingGET
        should("test getPlaceTimeUsingGET") {
            // uncomment below to test getPlaceTimeUsingGET
            //val placeId : kotlin.String = placeId_example // kotlin.String | A place id (either native 'id' or 'wikiDataId')
            //val result : TimeResponse = apiInstance.getPlaceTimeUsingGET(placeId)
            //result shouldBe ("TODO")
        }

        // to test getPlaceUsingGET
        should("test getPlaceUsingGET") {
            // uncomment below to test getPlaceUsingGET
            //val placeId : kotlin.String = placeId_example // kotlin.String | A place id (either native 'id' or 'wikiDataId')
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val result : PopulatedPlaceResponse = apiInstance.getPlaceUsingGET(placeId, asciiMode, languageCode)
            //result shouldBe ("TODO")
        }

        // to test getRegionUsingGET
        should("test getRegionUsingGET") {
            // uncomment below to test getRegionUsingGET
            //val countryId : kotlin.String = countryId_example // kotlin.String | An ISO-3166 country code or WikiData id
            //val regionCode : kotlin.String = regionCode_example // kotlin.String | An ISO-3166 or FIPS region code
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val result : RegionResponse = apiInstance.getRegionUsingGET(countryId, regionCode, asciiMode, languageCode)
            //result shouldBe ("TODO")
        }

        // to test getRegionsUsingGET
        should("test getRegionsUsingGET") {
            // uncomment below to test getRegionsUsingGET
            //val countryId : kotlin.String = countryId_example // kotlin.String | An ISO-3166 country code or WikiData id
            //val namePrefix : kotlin.String = namePrefix_example // kotlin.String | Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language. 
            //val namePrefixDefaultLangResults : kotlin.Boolean = true // kotlin.Boolean | When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set. 
            //val asciiMode : kotlin.Boolean = true // kotlin.Boolean | Display results using ASCII characters
            //val hateoasMode : kotlin.Boolean = true // kotlin.Boolean | Include HATEOAS-style links in results
            //val languageCode : kotlin.String = languageCode_example // kotlin.String | Display results in this language
            //val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of results to retrieve
            //val offset : kotlin.Int = 56 // kotlin.Int | The zero-ary offset index into the results
            //val sort : kotlin.String = sort_example // kotlin.String | How to sort regions.  Format: ±SORT_FIELD  where SORT_FIELD = fipsCode | isoCode | name
            //val result : RegionsResponse = apiInstance.getRegionsUsingGET(countryId, namePrefix, namePrefixDefaultLangResults, asciiMode, hateoasMode, languageCode, limit, offset, sort)
            //result shouldBe ("TODO")
        }

    }
}
