/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.PopulatedPlaceDetails
import org.openapitools.client.models.PopulatedPlaceType

class PopulatedPlaceDetailsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of PopulatedPlaceDetails
        //val modelInstance = PopulatedPlaceDetails()

        // to test the property `city` - The city name (legacy)
        should("test city") {
            // uncomment below to test the property
            //modelInstance.city shouldBe ("TODO")
        }

        // to test the property `country` - The country name (varies by languageCode)
        should("test country") {
            // uncomment below to test the property
            //modelInstance.country shouldBe ("TODO")
        }

        // to test the property `countryCode` - The ISO-3166 country code
        should("test countryCode") {
            // uncomment below to test the property
            //modelInstance.countryCode shouldBe ("TODO")
        }

        // to test the property `deleted` - If this place has been soft-deleted
        should("test deleted") {
            // uncomment below to test the property
            //modelInstance.deleted shouldBe ("TODO")
        }

        // to test the property `elevationMeters` - The place elevation (meters) above sea level
        should("test elevationMeters") {
            // uncomment below to test the property
            //modelInstance.elevationMeters shouldBe ("TODO")
        }

        // to test the property `id` - The place GeoDB native id
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `latitude` - The place latittude (-90.0 to 90.0)
        should("test latitude") {
            // uncomment below to test the property
            //modelInstance.latitude shouldBe ("TODO")
        }

        // to test the property `longitude` - The place longitude (-180.0 to 180.0)
        should("test longitude") {
            // uncomment below to test the property
            //modelInstance.longitude shouldBe ("TODO")
        }

        // to test the property `name` - The place name (varies by languageCode)
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `population` - The place population
        should("test population") {
            // uncomment below to test the property
            //modelInstance.population shouldBe ("TODO")
        }

        // to test the property `region` - The region name (varies by languageCode)
        should("test region") {
            // uncomment below to test the property
            //modelInstance.region shouldBe ("TODO")
        }

        // to test the property `regionCode` - The ISO or FIPS region code
        should("test regionCode") {
            // uncomment below to test the property
            //modelInstance.regionCode shouldBe ("TODO")
        }

        // to test the property `regionWdId` - The region Wikidata id
        should("test regionWdId") {
            // uncomment below to test the property
            //modelInstance.regionWdId shouldBe ("TODO")
        }

        // to test the property `timezone` - The place timezone id
        should("test timezone") {
            // uncomment below to test the property
            //modelInstance.timezone shouldBe ("TODO")
        }

        // to test the property `type`
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `wikiDataId` - The place WikiData id
        should("test wikiDataId") {
            // uncomment below to test the property
            //modelInstance.wikiDataId shouldBe ("TODO")
        }

    }
}
