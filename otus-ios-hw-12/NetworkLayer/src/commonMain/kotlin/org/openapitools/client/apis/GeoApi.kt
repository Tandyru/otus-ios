/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BaseResponse
import org.openapitools.client.models.CountriesResponse
import org.openapitools.client.models.CountryResponse
import org.openapitools.client.models.DateTimeResponse
import org.openapitools.client.models.DistanceResponse
import org.openapitools.client.models.PopulatedPlaceResponse
import org.openapitools.client.models.PopulatedPlacesResponse
import org.openapitools.client.models.RegionResponse
import org.openapitools.client.models.RegionsResponse
import org.openapitools.client.models.TimeResponse

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class GeoApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Find admin divisions
     * Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     * @param location Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD (optional)
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findAdminDivisionsUsingGET(location: kotlin.String? = null, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        location?.apply { localVariableQuery["location"] = listOf("$location") }
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/adminDivisions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find cities near division
     * Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     * @param divisionId An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findCitiesNearAdminDivisionUsingGET(divisionId: kotlin.String, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/adminDivisions/{divisionId}/nearbyCities".replace("{" + "divisionId" + "}", "$divisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find cities near city
     * Find cities near the given city, filtering by optional criteria. If no criteria are set, you will get back all cities within the default radius. 
     * @param cityId A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findCitiesNearCityUsingGET(cityId: kotlin.String, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/cities/{cityId}/nearbyCities".replace("{" + "cityId" + "}", "$cityId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find cities near location
     * Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back all cities within the default radius. 
     * @param locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findCitiesNearLocationUsingGET(locationId: kotlin.String, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/locations/{locationId}/nearbyCities".replace("{" + "locationId" + "}", "$locationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find cities
     * Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     * @param location Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD (optional)
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findCitiesUsingGET(location: kotlin.String? = null, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        location?.apply { localVariableQuery["location"] = listOf("$location") }
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/cities",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find country places
     * Get the country&#39;s places. The country is omitted in the response. 
     * @param countryId An ISO-3166 country code or WikiData id
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findCountryPlacesUsingGET(countryId: kotlin.String, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/countries/{countryId}/places".replace("{" + "countryId" + "}", "$countryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find admin divisions near division
     * Find administrative divisions near the given division, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     * @param divisionId An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findDivisionsNearAdminDivisionUsingGET(divisionId: kotlin.String, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/adminDivisions/{divisionId}/nearbyDivisions".replace("{" + "divisionId" + "}", "$divisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find admin divisions near city
     * Find administrative divisions near the given city, filtering by optional criteria. If no criteria are set, you will get back all divisions within the default radius. 
     * @param cityId A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findDivisionsNearCityUsingGET(cityId: kotlin.String, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/cities/{cityId}/nearbyDivisions".replace("{" + "cityId" + "}", "$cityId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find admin divisions near location
     * Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set, you will get back all divisions within the default radius. 
     * @param locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findDivisionsNearLocationUsingGET(locationId: kotlin.String, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/locations/{locationId}/nearbyDivisions".replace("{" + "locationId" + "}", "$locationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find places near division
     * Find places near the given administrative division, filtering by optional criteria. If no criteria are set, you will get back all known places. 
     * @param divisionId An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findPlacesNearAdminDivisionUsingGET(divisionId: kotlin.String, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/adminDivisions/{divisionId}/nearbyPlaces".replace("{" + "divisionId" + "}", "$divisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find places near city
     * Find places near the given city, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     * @param cityId A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findPlacesNearCityUsingGET(cityId: kotlin.String, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/cities/{cityId}/nearbyPlaces".replace("{" + "cityId" + "}", "$cityId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find places near location
     * Find places near the given location, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     * @param locationId A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findPlacesNearLocationUsingGET(locationId: kotlin.String, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/locations/{locationId}/nearbyPlaces".replace("{" + "locationId" + "}", "$locationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find places near place
     * Find places near the given place, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     * @param placeId A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findPlacesNearPlaceUsingGET(placeId: kotlin.String, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/places/{placeId}/nearbyPlaces".replace("{" + "placeId" + "}", "$placeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find places
     * Find places, filtering by optional criteria. If no criteria are set, you will get back all known places. 
     * @param location Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD (optional)
     * @param radius The location radius within which to find places (optional)
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @param countryIds Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param excludedCountryIds Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findPlacesUsingGET(location: kotlin.String? = null, radius: kotlin.Int? = null, distanceUnit: kotlin.String? = "MI", countryIds: kotlin.String? = null, excludedCountryIds: kotlin.String? = null, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        location?.apply { localVariableQuery["location"] = listOf("$location") }
        radius?.apply { localVariableQuery["radius"] = listOf("$radius") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        countryIds?.apply { localVariableQuery["countryIds"] = listOf("$countryIds") }
        excludedCountryIds?.apply { localVariableQuery["excludedCountryIds"] = listOf("$excludedCountryIds") }
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/places",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find country region cities
     * Get country region cities. The country and region info is omitted in the response. 
     * @param countryId An ISO-3166 country code or WikiData id
     * @param regionCode An ISO-3166 or FIPS region code
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findRegionCitiesUsingGET(countryId: kotlin.String, regionCode: kotlin.String, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/countries/{countryId}/regions/{regionCode}/cities".replace("{" + "countryId" + "}", "$countryId").replace("{" + "regionCode" + "}", "$regionCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find country region administrative divisions
     * Get country region administrative divisions. The country and region info is omitted in the response. 
     * @param countryId An ISO-3166 country code or WikiData id
     * @param regionCode An ISO-3166 or FIPS region code
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findRegionDivisionsUsingGET(countryId: kotlin.String, regionCode: kotlin.String, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/countries/{countryId}/regions/{regionCode}/adminDivisions".replace("{" + "countryId" + "}", "$countryId").replace("{" + "regionCode" + "}", "$regionCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find country region places
     * Get country region places. The country and region info is omitted in the response. 
     * @param countryId An ISO-3166 country code or WikiData id
     * @param regionCode An ISO-3166 or FIPS region code
     * @param minPopulation Only places having at least this population (optional)
     * @param maxPopulation Only places having no more than this population (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param timeZoneIds Only places in these time-zones (comma-delimited) (optional)
     * @param types Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     * @param includeDeleted Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     * @return PopulatedPlacesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun findRegionPlacesUsingGET(countryId: kotlin.String, regionCode: kotlin.String, minPopulation: kotlin.Int? = null, maxPopulation: kotlin.Int? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, timeZoneIds: kotlin.String? = null, types: kotlin.String? = null, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null, includeDeleted: kotlin.String? = "NONE"): HttpResponse<PopulatedPlacesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        minPopulation?.apply { localVariableQuery["minPopulation"] = listOf("$minPopulation") }
        maxPopulation?.apply { localVariableQuery["maxPopulation"] = listOf("$maxPopulation") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        timeZoneIds?.apply { localVariableQuery["timeZoneIds"] = listOf("$timeZoneIds") }
        types?.apply { localVariableQuery["types"] = listOf("$types") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        includeDeleted?.apply { localVariableQuery["includeDeleted"] = listOf("$includeDeleted") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/countries/{countryId}/regions/{regionCode}/places".replace("{" + "countryId" + "}", "$countryId").replace("{" + "regionCode" + "}", "$regionCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get admin division details
     * Get administrative division details such as location coordinates, population, and elevation above sea-level (if available). 
     * @param divisionId An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param languageCode Display results in this language (optional)
     * @return PopulatedPlaceResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAdminDivisionUsingGET(divisionId: kotlin.String, asciiMode: kotlin.Boolean? = false, languageCode: kotlin.String? = null): HttpResponse<PopulatedPlaceResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/adminDivisions/{divisionId}".replace("{" + "divisionId" + "}", "$divisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get city date-time
     * Get city date-time
     * @param cityId A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @return DateTimeResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getCityDateTimeUsingGET(cityId: kotlin.String): HttpResponse<DateTimeResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/cities/{cityId}/dateTime".replace("{" + "cityId" + "}", "$cityId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get city distance
     * Get distance from the given city
     * @param cityId A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param toCityId Distance to this city
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @return DistanceResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getCityDistanceUsingGET(cityId: kotlin.String, toCityId: kotlin.String, distanceUnit: kotlin.String? = "MI"): HttpResponse<DistanceResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        toCityId?.apply { localVariableQuery["toCityId"] = listOf("$toCityId") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/cities/{cityId}/distance".replace("{" + "cityId" + "}", "$cityId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get city containing region
     * Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level (if available). 
     * @param cityId A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param languageCode Display results in this language (optional)
     * @return PopulatedPlaceResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getCityLocatedInUsingGET(cityId: kotlin.String, asciiMode: kotlin.Boolean? = false, languageCode: kotlin.String? = null): HttpResponse<PopulatedPlaceResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/cities/{cityId}/locatedIn".replace("{" + "cityId" + "}", "$cityId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get city time
     * Get city time
     * @param cityId A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @return TimeResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getCityTimeUsingGET(cityId: kotlin.String): HttpResponse<TimeResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/cities/{cityId}/time".replace("{" + "cityId" + "}", "$cityId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get city details
     * Get city details such as location coordinates, population, and elevation above sea-level (if available). 
     * @param cityId A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param languageCode Display results in this language (optional)
     * @return PopulatedPlaceResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getCityUsingGET(cityId: kotlin.String, asciiMode: kotlin.Boolean? = false, languageCode: kotlin.String? = null): HttpResponse<PopulatedPlaceResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/cities/{cityId}".replace("{" + "cityId" + "}", "$cityId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find countries
     * Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries. 
     * @param currencyCode Only countries supporting this currency (optional)
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort countries.  Format: ±SORT_FIELD  where SORT_FIELD &#x3D; code | name (optional)
     * @return CountriesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getCountriesUsingGET(currencyCode: kotlin.String? = null, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null): HttpResponse<CountriesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        currencyCode?.apply { localVariableQuery["currencyCode"] = listOf("$currencyCode") }
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/countries",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get country details
     * Get country details such as number of regions.
     * @param countryId An ISO-3166 country code or WikiData id
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param languageCode Display results in this language (optional)
     * @return CountryResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getCountryUsingGET(countryId: kotlin.String, asciiMode: kotlin.Boolean? = false, languageCode: kotlin.String? = null): HttpResponse<CountryResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/countries/{countryId}".replace("{" + "countryId" + "}", "$countryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get place date-time
     * Get place date-time
     * @param placeId A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @return DateTimeResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getPlaceDateTimeUsingGET(placeId: kotlin.String): HttpResponse<DateTimeResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/places/{placeId}/dateTime".replace("{" + "placeId" + "}", "$placeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get place distance
     * Get distance from the given place
     * @param placeId A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param toPlaceId Distance to this place
     * @param distanceUnit The unit of distance: MI | KM (optional, default to "MI")
     * @return DistanceResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getPlaceDistanceUsingGET(placeId: kotlin.String, toPlaceId: kotlin.String, distanceUnit: kotlin.String? = "MI"): HttpResponse<DistanceResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        toPlaceId?.apply { localVariableQuery["toPlaceId"] = listOf("$toPlaceId") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/places/{placeId}/distance".replace("{" + "placeId" + "}", "$placeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get place containing region
     * Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level (if available). 
     * @param placeId A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param languageCode Display results in this language (optional)
     * @return PopulatedPlaceResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getPlaceLocatedInUsingGET(placeId: kotlin.String, asciiMode: kotlin.Boolean? = false, languageCode: kotlin.String? = null): HttpResponse<PopulatedPlaceResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/places/{placeId}/locatedIn".replace("{" + "placeId" + "}", "$placeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get place time
     * Get place time
     * @param placeId A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @return TimeResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getPlaceTimeUsingGET(placeId: kotlin.String): HttpResponse<TimeResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/places/{placeId}/time".replace("{" + "placeId" + "}", "$placeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get place details
     * Get place details such as location coordinates, population, and elevation above sea-level (if available). 
     * @param placeId A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param languageCode Display results in this language (optional)
     * @return PopulatedPlaceResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getPlaceUsingGET(placeId: kotlin.String, asciiMode: kotlin.Boolean? = false, languageCode: kotlin.String? = null): HttpResponse<PopulatedPlaceResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/places/{placeId}".replace("{" + "placeId" + "}", "$placeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get region details
     * Get country region details such as number of cities.
     * @param countryId An ISO-3166 country code or WikiData id
     * @param regionCode An ISO-3166 or FIPS region code
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param languageCode Display results in this language (optional)
     * @return RegionResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getRegionUsingGET(countryId: kotlin.String, regionCode: kotlin.String, asciiMode: kotlin.Boolean? = false, languageCode: kotlin.String? = null): HttpResponse<RegionResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/countries/{countryId}/regions/{regionCode}".replace("{" + "countryId" + "}", "$countryId").replace("{" + "regionCode" + "}", "$regionCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Find country regions
     * Get the country&#39;s regions. These could be states, provinces, districts, or otherwise major political divisions. 
     * @param countryId An ISO-3166 country code or WikiData id
     * @param namePrefix Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     * @param namePrefixDefaultLangResults When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     * @param asciiMode Display results using ASCII characters (optional, default to false)
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param languageCode Display results in this language (optional)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @param sort How to sort regions.  Format: ±SORT_FIELD  where SORT_FIELD &#x3D; fipsCode | isoCode | name (optional)
     * @return RegionsResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getRegionsUsingGET(countryId: kotlin.String, namePrefix: kotlin.String? = null, namePrefixDefaultLangResults: kotlin.Boolean? = true, asciiMode: kotlin.Boolean? = false, hateoasMode: kotlin.Boolean? = true, languageCode: kotlin.String? = null, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0, sort: kotlin.String? = null): HttpResponse<RegionsResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        namePrefix?.apply { localVariableQuery["namePrefix"] = listOf("$namePrefix") }
        namePrefixDefaultLangResults?.apply { localVariableQuery["namePrefixDefaultLangResults"] = listOf("$namePrefixDefaultLangResults") }
        asciiMode?.apply { localVariableQuery["asciiMode"] = listOf("$asciiMode") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        languageCode?.apply { localVariableQuery["languageCode"] = listOf("$languageCode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/geo/countries/{countryId}/regions".replace("{" + "countryId" + "}", "$countryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
