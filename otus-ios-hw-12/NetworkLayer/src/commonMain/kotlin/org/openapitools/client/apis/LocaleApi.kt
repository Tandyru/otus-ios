/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BadRequestResponse
import org.openapitools.client.models.CurrenciesResponse
import org.openapitools.client.models.DateTimeResponse
import org.openapitools.client.models.ForbiddenResponse
import org.openapitools.client.models.LanguagesResponse
import org.openapitools.client.models.LocalesResponse
import org.openapitools.client.models.NotFoundResponse
import org.openapitools.client.models.TimeResponse
import org.openapitools.client.models.TimeZoneResponse
import org.openapitools.client.models.TimeZonesResponse

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class LocaleApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Find currencies
     * Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
     * @param countryId Currencies for this country id
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return CurrenciesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getCurrenciesUsingGET(countryId: kotlin.String, hateoasMode: kotlin.Boolean? = true, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0): HttpResponse<CurrenciesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        countryId?.apply { localVariableQuery["countryId"] = listOf("$countryId") }
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/locale/currencies",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get languages
     * Get all supported languages
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return LanguagesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getLanguagesUsingGET(hateoasMode: kotlin.Boolean? = true, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0): HttpResponse<LanguagesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/locale/languages",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get locales
     * Get all known locales
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return LocalesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getLocalesUsingGET(hateoasMode: kotlin.Boolean? = true, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0): HttpResponse<LocalesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/locale/locales",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get time-zone date-time
     * Get time-zone date-time
     * @param zoneId A time-zone id
     * @return DateTimeResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getTimeZoneDateTimeUsingGET(zoneId: kotlin.String): HttpResponse<DateTimeResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/locale/timezones/{zoneId}/dateTime".replace("{" + "zoneId" + "}", "$zoneId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get time-zone time
     * Get time-zone time
     * @param zoneId A time-zone id
     * @return TimeResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getTimeZoneTimeUsingGET(zoneId: kotlin.String): HttpResponse<TimeResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/locale/timezones/{zoneId}/time".replace("{" + "zoneId" + "}", "$zoneId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get time-zone
     * Get time-zone
     * @param zoneId A time-zone id
     * @return TimeZoneResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getTimeZoneUsingGET(zoneId: kotlin.String): HttpResponse<TimeZoneResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/locale/timezones/{zoneId}".replace("{" + "zoneId" + "}", "$zoneId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get time-zones
     * Get all known time-zones
     * @param hateoasMode Include HATEOAS-style links in results (optional, default to true)
     * @param limit The maximum number of results to retrieve (optional, default to 10)
     * @param offset The zero-ary offset index into the results (optional, default to 0)
     * @return TimeZonesResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getTimezonesUsingGET(hateoasMode: kotlin.Boolean? = true, limit: kotlin.Int? = 10, offset: kotlin.Int? = 0): HttpResponse<TimeZonesResponse> {

        val localVariableAuthNames = listOf<String>("UserSecurity")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        hateoasMode?.apply { localVariableQuery["hateoasMode"] = listOf("$hateoasMode") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/locale/timezones",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
