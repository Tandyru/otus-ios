//
// PopulatedPlaceDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Full populated-place details */
public struct PopulatedPlaceDetails: Codable, JSONEncodable, Hashable {

    /** The city name (legacy) */
    public var city: String?
    /** The country name (varies by languageCode) */
    public var country: String?
    /** The ISO-3166 country code */
    public var countryCode: String?
    /** If this place has been soft-deleted */
    public var deleted: Bool?
    /** The place elevation (meters) above sea level */
    public var elevationMeters: Int?
    /** The place GeoDB native id */
    public var id: Int?
    /** The place latittude (-90.0 to 90.0) */
    public var latitude: Double?
    /** The place longitude (-180.0 to 180.0) */
    public var longitude: Double?
    /** The place name (varies by languageCode) */
    public var name: String?
    /** The place population */
    public var population: Int?
    /** The region name (varies by languageCode) */
    public var region: String?
    /** The ISO or FIPS region code */
    public var regionCode: String?
    /** The region Wikidata id */
    public var regionWdId: String?
    /** The place timezone id */
    public var timezone: String?
    public var type: PopulatedPlaceType?
    /** The place WikiData id */
    public var wikiDataId: String?

    public init(city: String? = nil, country: String? = nil, countryCode: String? = nil, deleted: Bool? = nil, elevationMeters: Int? = nil, id: Int? = nil, latitude: Double? = nil, longitude: Double? = nil, name: String? = nil, population: Int? = nil, region: String? = nil, regionCode: String? = nil, regionWdId: String? = nil, timezone: String? = nil, type: PopulatedPlaceType? = nil, wikiDataId: String? = nil) {
        self.city = city
        self.country = country
        self.countryCode = countryCode
        self.deleted = deleted
        self.elevationMeters = elevationMeters
        self.id = id
        self.latitude = latitude
        self.longitude = longitude
        self.name = name
        self.population = population
        self.region = region
        self.regionCode = regionCode
        self.regionWdId = regionWdId
        self.timezone = timezone
        self.type = type
        self.wikiDataId = wikiDataId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case city
        case country
        case countryCode
        case deleted
        case elevationMeters
        case id
        case latitude
        case longitude
        case name
        case population
        case region
        case regionCode
        case regionWdId
        case timezone
        case type
        case wikiDataId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(deleted, forKey: .deleted)
        try container.encodeIfPresent(elevationMeters, forKey: .elevationMeters)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(population, forKey: .population)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(regionCode, forKey: .regionCode)
        try container.encodeIfPresent(regionWdId, forKey: .regionWdId)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(wikiDataId, forKey: .wikiDataId)
    }
}

