//
// GeoAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GeoAPI {

    /**
     Find admin divisions
     
     - parameter location: (query) Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD (optional)
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findAdminDivisionsUsingGET(location: String? = nil, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findAdminDivisionsUsingGETWithRequestBuilder(location: location, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find admin divisions
     - GET /geo/adminDivisions
     - Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter location: (query) Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD (optional)
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findAdminDivisionsUsingGETWithRequestBuilder(location: String? = nil, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        let localVariablePath = "/geo/adminDivisions"
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "location": (wrappedValue: location?.encodeToJSON(), isExplode: false),
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find cities near division
     
     - parameter divisionId: (path) An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findCitiesNearAdminDivisionUsingGET(divisionId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findCitiesNearAdminDivisionUsingGETWithRequestBuilder(divisionId: divisionId, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find cities near division
     - GET /geo/adminDivisions/{divisionId}/nearbyCities
     - Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter divisionId: (path) An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findCitiesNearAdminDivisionUsingGETWithRequestBuilder(divisionId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/adminDivisions/{divisionId}/nearbyCities"
        let divisionIdPreEscape = "\(APIHelper.mapValueToPathItem(divisionId))"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find cities near city
     
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findCitiesNearCityUsingGET(cityId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findCitiesNearCityUsingGETWithRequestBuilder(cityId: cityId, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find cities near city
     - GET /geo/cities/{cityId}/nearbyCities
     - Find cities near the given city, filtering by optional criteria. If no criteria are set, you will get back all cities within the default radius. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findCitiesNearCityUsingGETWithRequestBuilder(cityId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/cities/{cityId}/nearbyCities"
        let cityIdPreEscape = "\(APIHelper.mapValueToPathItem(cityId))"
        let cityIdPostEscape = cityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{cityId}", with: cityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find cities near location
     
     - parameter locationId: (path) A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findCitiesNearLocationUsingGET(locationId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findCitiesNearLocationUsingGETWithRequestBuilder(locationId: locationId, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find cities near location
     - GET /geo/locations/{locationId}/nearbyCities
     - Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back all cities within the default radius. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter locationId: (path) A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findCitiesNearLocationUsingGETWithRequestBuilder(locationId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/locations/{locationId}/nearbyCities"
        let locationIdPreEscape = "\(APIHelper.mapValueToPathItem(locationId))"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{locationId}", with: locationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find cities
     
     - parameter location: (query) Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD (optional)
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findCitiesUsingGET(location: String? = nil, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findCitiesUsingGETWithRequestBuilder(location: location, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find cities
     - GET /geo/cities
     - Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter location: (query) Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD (optional)
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findCitiesUsingGETWithRequestBuilder(location: String? = nil, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        let localVariablePath = "/geo/cities"
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "location": (wrappedValue: location?.encodeToJSON(), isExplode: false),
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find country places
     
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findCountryPlacesUsingGET(countryId: String, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findCountryPlacesUsingGETWithRequestBuilder(countryId: countryId, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find country places
     - GET /geo/countries/{countryId}/places
     - Get the country's places. The country is omitted in the response. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findCountryPlacesUsingGETWithRequestBuilder(countryId: String, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/countries/{countryId}/places"
        let countryIdPreEscape = "\(APIHelper.mapValueToPathItem(countryId))"
        let countryIdPostEscape = countryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{countryId}", with: countryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find admin divisions near division
     
     - parameter divisionId: (path) An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findDivisionsNearAdminDivisionUsingGET(divisionId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findDivisionsNearAdminDivisionUsingGETWithRequestBuilder(divisionId: divisionId, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find admin divisions near division
     - GET /geo/adminDivisions/{divisionId}/nearbyDivisions
     - Find administrative divisions near the given division, filtering by optional criteria. If no criteria are set, you will get back all known divisions. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter divisionId: (path) An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findDivisionsNearAdminDivisionUsingGETWithRequestBuilder(divisionId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/adminDivisions/{divisionId}/nearbyDivisions"
        let divisionIdPreEscape = "\(APIHelper.mapValueToPathItem(divisionId))"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find admin divisions near city
     
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findDivisionsNearCityUsingGET(cityId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findDivisionsNearCityUsingGETWithRequestBuilder(cityId: cityId, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find admin divisions near city
     - GET /geo/cities/{cityId}/nearbyDivisions
     - Find administrative divisions near the given city, filtering by optional criteria. If no criteria are set, you will get back all divisions within the default radius. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findDivisionsNearCityUsingGETWithRequestBuilder(cityId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/cities/{cityId}/nearbyDivisions"
        let cityIdPreEscape = "\(APIHelper.mapValueToPathItem(cityId))"
        let cityIdPostEscape = cityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{cityId}", with: cityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find admin divisions near location
     
     - parameter locationId: (path) A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findDivisionsNearLocationUsingGET(locationId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findDivisionsNearLocationUsingGETWithRequestBuilder(locationId: locationId, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find admin divisions near location
     - GET /geo/locations/{locationId}/nearbyDivisions
     - Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set, you will get back all divisions within the default radius. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter locationId: (path) A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findDivisionsNearLocationUsingGETWithRequestBuilder(locationId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/locations/{locationId}/nearbyDivisions"
        let locationIdPreEscape = "\(APIHelper.mapValueToPathItem(locationId))"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{locationId}", with: locationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find places near division
     
     - parameter divisionId: (path) An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findPlacesNearAdminDivisionUsingGET(divisionId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findPlacesNearAdminDivisionUsingGETWithRequestBuilder(divisionId: divisionId, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find places near division
     - GET /geo/adminDivisions/{divisionId}/nearbyPlaces
     - Find places near the given administrative division, filtering by optional criteria. If no criteria are set, you will get back all known places. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter divisionId: (path) An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findPlacesNearAdminDivisionUsingGETWithRequestBuilder(divisionId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/adminDivisions/{divisionId}/nearbyPlaces"
        let divisionIdPreEscape = "\(APIHelper.mapValueToPathItem(divisionId))"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find places near city
     
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findPlacesNearCityUsingGET(cityId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findPlacesNearCityUsingGETWithRequestBuilder(cityId: cityId, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find places near city
     - GET /geo/cities/{cityId}/nearbyPlaces
     - Find places near the given city, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findPlacesNearCityUsingGETWithRequestBuilder(cityId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/cities/{cityId}/nearbyPlaces"
        let cityIdPreEscape = "\(APIHelper.mapValueToPathItem(cityId))"
        let cityIdPostEscape = cityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{cityId}", with: cityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find places near location
     
     - parameter locationId: (path) A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findPlacesNearLocationUsingGET(locationId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findPlacesNearLocationUsingGETWithRequestBuilder(locationId: locationId, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find places near location
     - GET /geo/locations/{locationId}/nearbyPlaces
     - Find places near the given location, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter locationId: (path) A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findPlacesNearLocationUsingGETWithRequestBuilder(locationId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/locations/{locationId}/nearbyPlaces"
        let locationIdPreEscape = "\(APIHelper.mapValueToPathItem(locationId))"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{locationId}", with: locationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find places near place
     
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findPlacesNearPlaceUsingGET(placeId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findPlacesNearPlaceUsingGETWithRequestBuilder(placeId: placeId, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find places near place
     - GET /geo/places/{placeId}/nearbyPlaces
     - Find places near the given place, filtering by optional criteria. If no criteria are set, you will get back all places within the default radius. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findPlacesNearPlaceUsingGETWithRequestBuilder(placeId: String, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/places/{placeId}/nearbyPlaces"
        let placeIdPreEscape = "\(APIHelper.mapValueToPathItem(placeId))"
        let placeIdPostEscape = placeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{placeId}", with: placeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find places
     
     - parameter location: (query) Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD (optional)
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findPlacesUsingGET(location: String? = nil, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findPlacesUsingGETWithRequestBuilder(location: location, radius: radius, distanceUnit: distanceUnit, countryIds: countryIds, excludedCountryIds: excludedCountryIds, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find places
     - GET /geo/places
     - Find places, filtering by optional criteria. If no criteria are set, you will get back all known places. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter location: (query) Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD (optional)
     - parameter radius: (query) The location radius within which to find places (optional)
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - parameter countryIds: (query) Only places in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter excludedCountryIds: (query) Only places NOT in these countries (comma-delimited country codes or WikiData ids) (optional)
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort places.  Format: ±SORT_FIELD,±SORT_FIELD  where SORT_FIELD &#x3D; countryCode | elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findPlacesUsingGETWithRequestBuilder(location: String? = nil, radius: Int? = nil, distanceUnit: String? = nil, countryIds: String? = nil, excludedCountryIds: String? = nil, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        let localVariablePath = "/geo/places"
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "location": (wrappedValue: location?.encodeToJSON(), isExplode: false),
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
            "countryIds": (wrappedValue: countryIds?.encodeToJSON(), isExplode: false),
            "excludedCountryIds": (wrappedValue: excludedCountryIds?.encodeToJSON(), isExplode: false),
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find country region cities
     
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter regionCode: (path) An ISO-3166 or FIPS region code 
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findRegionCitiesUsingGET(countryId: String, regionCode: String, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findRegionCitiesUsingGETWithRequestBuilder(countryId: countryId, regionCode: regionCode, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find country region cities
     - GET /geo/countries/{countryId}/regions/{regionCode}/cities
     - Get country region cities. The country and region info is omitted in the response. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter regionCode: (path) An ISO-3166 or FIPS region code 
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only cities for these types (comma-delimited): ADM2 | CITY (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findRegionCitiesUsingGETWithRequestBuilder(countryId: String, regionCode: String, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/countries/{countryId}/regions/{regionCode}/cities"
        let countryIdPreEscape = "\(APIHelper.mapValueToPathItem(countryId))"
        let countryIdPostEscape = countryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{countryId}", with: countryIdPostEscape, options: .literal, range: nil)
        let regionCodePreEscape = "\(APIHelper.mapValueToPathItem(regionCode))"
        let regionCodePostEscape = regionCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{regionCode}", with: regionCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find country region administrative divisions
     
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter regionCode: (path) An ISO-3166 or FIPS region code 
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findRegionDivisionsUsingGET(countryId: String, regionCode: String, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findRegionDivisionsUsingGETWithRequestBuilder(countryId: countryId, regionCode: regionCode, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find country region administrative divisions
     - GET /geo/countries/{countryId}/regions/{regionCode}/adminDivisions
     - Get country region administrative divisions. The country and region info is omitted in the response. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter regionCode: (path) An ISO-3166 or FIPS region code 
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findRegionDivisionsUsingGETWithRequestBuilder(countryId: String, regionCode: String, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/countries/{countryId}/regions/{regionCode}/adminDivisions"
        let countryIdPreEscape = "\(APIHelper.mapValueToPathItem(countryId))"
        let countryIdPostEscape = countryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{countryId}", with: countryIdPostEscape, options: .literal, range: nil)
        let regionCodePreEscape = "\(APIHelper.mapValueToPathItem(regionCode))"
        let regionCodePostEscape = regionCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{regionCode}", with: regionCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find country region places
     
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter regionCode: (path) An ISO-3166 or FIPS region code 
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: PopulatedPlacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findRegionPlacesUsingGET(countryId: String, regionCode: String, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) async throws -> PopulatedPlacesResponse {
        return try await findRegionPlacesUsingGETWithRequestBuilder(countryId: countryId, regionCode: regionCode, minPopulation: minPopulation, maxPopulation: maxPopulation, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, timeZoneIds: timeZoneIds, types: types, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort, includeDeleted: includeDeleted).execute().body
    }

    /**
     Find country region places
     - GET /geo/countries/{countryId}/regions/{regionCode}/places
     - Get country region places. The country and region info is omitted in the response. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter regionCode: (path) An ISO-3166 or FIPS region code 
     - parameter minPopulation: (query) Only places having at least this population (optional)
     - parameter maxPopulation: (query) Only places having no more than this population (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter timeZoneIds: (query) Only places in these time-zones (comma-delimited) (optional)
     - parameter types: (query) Only places for these types (comma-delimited): ADM2 | CITY | ISLAND (optional)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort place results.  &#39;Format: ±SORT_FIELD,±SORT_FIELD&#39;  where SORT_FIELD &#x3D; elevation | name | population  (optional)
     - parameter includeDeleted: (query) Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE (optional, default to "NONE")
     - returns: RequestBuilder<PopulatedPlacesResponse> 
     */
    open class func findRegionPlacesUsingGETWithRequestBuilder(countryId: String, regionCode: String, minPopulation: Int? = nil, maxPopulation: Int? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, timeZoneIds: String? = nil, types: String? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil, includeDeleted: String? = nil) -> RequestBuilder<PopulatedPlacesResponse> {
        var localVariablePath = "/geo/countries/{countryId}/regions/{regionCode}/places"
        let countryIdPreEscape = "\(APIHelper.mapValueToPathItem(countryId))"
        let countryIdPostEscape = countryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{countryId}", with: countryIdPostEscape, options: .literal, range: nil)
        let regionCodePreEscape = "\(APIHelper.mapValueToPathItem(regionCode))"
        let regionCodePostEscape = regionCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{regionCode}", with: regionCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "minPopulation": (wrappedValue: minPopulation?.encodeToJSON(), isExplode: false),
            "maxPopulation": (wrappedValue: maxPopulation?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "timeZoneIds": (wrappedValue: timeZoneIds?.encodeToJSON(), isExplode: false),
            "types": (wrappedValue: types?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "includeDeleted": (wrappedValue: includeDeleted?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlacesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get admin division details
     
     - parameter divisionId: (path) An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: PopulatedPlaceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAdminDivisionUsingGET(divisionId: String, asciiMode: Bool? = nil, languageCode: String? = nil) async throws -> PopulatedPlaceResponse {
        return try await getAdminDivisionUsingGETWithRequestBuilder(divisionId: divisionId, asciiMode: asciiMode, languageCode: languageCode).execute().body
    }

    /**
     Get admin division details
     - GET /geo/adminDivisions/{divisionId}
     - Get administrative division details such as location coordinates, population, and elevation above sea-level (if available). 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter divisionId: (path) An admin-division id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: RequestBuilder<PopulatedPlaceResponse> 
     */
    open class func getAdminDivisionUsingGETWithRequestBuilder(divisionId: String, asciiMode: Bool? = nil, languageCode: String? = nil) -> RequestBuilder<PopulatedPlaceResponse> {
        var localVariablePath = "/geo/adminDivisions/{divisionId}"
        let divisionIdPreEscape = "\(APIHelper.mapValueToPathItem(divisionId))"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlaceResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get city date-time
     
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - returns: DateTimeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCityDateTimeUsingGET(cityId: String) async throws -> DateTimeResponse {
        return try await getCityDateTimeUsingGETWithRequestBuilder(cityId: cityId).execute().body
    }

    /**
     Get city date-time
     - GET /geo/cities/{cityId}/dateTime
     - Get city date-time
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - returns: RequestBuilder<DateTimeResponse> 
     */
    open class func getCityDateTimeUsingGETWithRequestBuilder(cityId: String) -> RequestBuilder<DateTimeResponse> {
        var localVariablePath = "/geo/cities/{cityId}/dateTime"
        let cityIdPreEscape = "\(APIHelper.mapValueToPathItem(cityId))"
        let cityIdPostEscape = cityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{cityId}", with: cityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DateTimeResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get city distance
     
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter toCityId: (query) Distance to this city 
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - returns: DistanceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCityDistanceUsingGET(cityId: String, toCityId: String, distanceUnit: String? = nil) async throws -> DistanceResponse {
        return try await getCityDistanceUsingGETWithRequestBuilder(cityId: cityId, toCityId: toCityId, distanceUnit: distanceUnit).execute().body
    }

    /**
     Get city distance
     - GET /geo/cities/{cityId}/distance
     - Get distance from the given city
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter toCityId: (query) Distance to this city 
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - returns: RequestBuilder<DistanceResponse> 
     */
    open class func getCityDistanceUsingGETWithRequestBuilder(cityId: String, toCityId: String, distanceUnit: String? = nil) -> RequestBuilder<DistanceResponse> {
        var localVariablePath = "/geo/cities/{cityId}/distance"
        let cityIdPreEscape = "\(APIHelper.mapValueToPathItem(cityId))"
        let cityIdPostEscape = cityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{cityId}", with: cityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "toCityId": (wrappedValue: toCityId.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DistanceResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get city containing region
     
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: PopulatedPlaceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCityLocatedInUsingGET(cityId: String, asciiMode: Bool? = nil, languageCode: String? = nil) async throws -> PopulatedPlaceResponse {
        return try await getCityLocatedInUsingGETWithRequestBuilder(cityId: cityId, asciiMode: asciiMode, languageCode: languageCode).execute().body
    }

    /**
     Get city containing region
     - GET /geo/cities/{cityId}/locatedIn
     - Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level (if available). 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: RequestBuilder<PopulatedPlaceResponse> 
     */
    open class func getCityLocatedInUsingGETWithRequestBuilder(cityId: String, asciiMode: Bool? = nil, languageCode: String? = nil) -> RequestBuilder<PopulatedPlaceResponse> {
        var localVariablePath = "/geo/cities/{cityId}/locatedIn"
        let cityIdPreEscape = "\(APIHelper.mapValueToPathItem(cityId))"
        let cityIdPostEscape = cityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{cityId}", with: cityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlaceResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get city time
     
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - returns: TimeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCityTimeUsingGET(cityId: String) async throws -> TimeResponse {
        return try await getCityTimeUsingGETWithRequestBuilder(cityId: cityId).execute().body
    }

    /**
     Get city time
     - GET /geo/cities/{cityId}/time
     - Get city time
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - returns: RequestBuilder<TimeResponse> 
     */
    open class func getCityTimeUsingGETWithRequestBuilder(cityId: String) -> RequestBuilder<TimeResponse> {
        var localVariablePath = "/geo/cities/{cityId}/time"
        let cityIdPreEscape = "\(APIHelper.mapValueToPathItem(cityId))"
        let cityIdPostEscape = cityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{cityId}", with: cityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TimeResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get city details
     
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: PopulatedPlaceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCityUsingGET(cityId: String, asciiMode: Bool? = nil, languageCode: String? = nil) async throws -> PopulatedPlaceResponse {
        return try await getCityUsingGETWithRequestBuilder(cityId: cityId, asciiMode: asciiMode, languageCode: languageCode).execute().body
    }

    /**
     Get city details
     - GET /geo/cities/{cityId}
     - Get city details such as location coordinates, population, and elevation above sea-level (if available). 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter cityId: (path) A city id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: RequestBuilder<PopulatedPlaceResponse> 
     */
    open class func getCityUsingGETWithRequestBuilder(cityId: String, asciiMode: Bool? = nil, languageCode: String? = nil) -> RequestBuilder<PopulatedPlaceResponse> {
        var localVariablePath = "/geo/cities/{cityId}"
        let cityIdPreEscape = "\(APIHelper.mapValueToPathItem(cityId))"
        let cityIdPostEscape = cityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{cityId}", with: cityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlaceResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find countries
     
     - parameter currencyCode: (query) Only countries supporting this currency (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort countries.  Format: ±SORT_FIELD  where SORT_FIELD &#x3D; code | name (optional)
     - returns: CountriesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCountriesUsingGET(currencyCode: String? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil) async throws -> CountriesResponse {
        return try await getCountriesUsingGETWithRequestBuilder(currencyCode: currencyCode, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort).execute().body
    }

    /**
     Find countries
     - GET /geo/countries
     - Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter currencyCode: (query) Only countries supporting this currency (optional)
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort countries.  Format: ±SORT_FIELD  where SORT_FIELD &#x3D; code | name (optional)
     - returns: RequestBuilder<CountriesResponse> 
     */
    open class func getCountriesUsingGETWithRequestBuilder(currencyCode: String? = nil, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil) -> RequestBuilder<CountriesResponse> {
        let localVariablePath = "/geo/countries"
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "currencyCode": (wrappedValue: currencyCode?.encodeToJSON(), isExplode: false),
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CountriesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get country details
     
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: CountryResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCountryUsingGET(countryId: String, asciiMode: Bool? = nil, languageCode: String? = nil) async throws -> CountryResponse {
        return try await getCountryUsingGETWithRequestBuilder(countryId: countryId, asciiMode: asciiMode, languageCode: languageCode).execute().body
    }

    /**
     Get country details
     - GET /geo/countries/{countryId}
     - Get country details such as number of regions.
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: RequestBuilder<CountryResponse> 
     */
    open class func getCountryUsingGETWithRequestBuilder(countryId: String, asciiMode: Bool? = nil, languageCode: String? = nil) -> RequestBuilder<CountryResponse> {
        var localVariablePath = "/geo/countries/{countryId}"
        let countryIdPreEscape = "\(APIHelper.mapValueToPathItem(countryId))"
        let countryIdPostEscape = countryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{countryId}", with: countryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CountryResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get place date-time
     
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - returns: DateTimeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPlaceDateTimeUsingGET(placeId: String) async throws -> DateTimeResponse {
        return try await getPlaceDateTimeUsingGETWithRequestBuilder(placeId: placeId).execute().body
    }

    /**
     Get place date-time
     - GET /geo/places/{placeId}/dateTime
     - Get place date-time
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - returns: RequestBuilder<DateTimeResponse> 
     */
    open class func getPlaceDateTimeUsingGETWithRequestBuilder(placeId: String) -> RequestBuilder<DateTimeResponse> {
        var localVariablePath = "/geo/places/{placeId}/dateTime"
        let placeIdPreEscape = "\(APIHelper.mapValueToPathItem(placeId))"
        let placeIdPostEscape = placeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{placeId}", with: placeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DateTimeResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get place distance
     
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter toPlaceId: (query) Distance to this place 
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - returns: DistanceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPlaceDistanceUsingGET(placeId: String, toPlaceId: String, distanceUnit: String? = nil) async throws -> DistanceResponse {
        return try await getPlaceDistanceUsingGETWithRequestBuilder(placeId: placeId, toPlaceId: toPlaceId, distanceUnit: distanceUnit).execute().body
    }

    /**
     Get place distance
     - GET /geo/places/{placeId}/distance
     - Get distance from the given place
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter toPlaceId: (query) Distance to this place 
     - parameter distanceUnit: (query) The unit of distance: MI | KM (optional, default to "MI")
     - returns: RequestBuilder<DistanceResponse> 
     */
    open class func getPlaceDistanceUsingGETWithRequestBuilder(placeId: String, toPlaceId: String, distanceUnit: String? = nil) -> RequestBuilder<DistanceResponse> {
        var localVariablePath = "/geo/places/{placeId}/distance"
        let placeIdPreEscape = "\(APIHelper.mapValueToPathItem(placeId))"
        let placeIdPostEscape = placeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{placeId}", with: placeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "toPlaceId": (wrappedValue: toPlaceId.encodeToJSON(), isExplode: false),
            "distanceUnit": (wrappedValue: distanceUnit?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DistanceResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get place containing region
     
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: PopulatedPlaceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPlaceLocatedInUsingGET(placeId: String, asciiMode: Bool? = nil, languageCode: String? = nil) async throws -> PopulatedPlaceResponse {
        return try await getPlaceLocatedInUsingGETWithRequestBuilder(placeId: placeId, asciiMode: asciiMode, languageCode: languageCode).execute().body
    }

    /**
     Get place containing region
     - GET /geo/places/{placeId}/locatedIn
     - Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level (if available). 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: RequestBuilder<PopulatedPlaceResponse> 
     */
    open class func getPlaceLocatedInUsingGETWithRequestBuilder(placeId: String, asciiMode: Bool? = nil, languageCode: String? = nil) -> RequestBuilder<PopulatedPlaceResponse> {
        var localVariablePath = "/geo/places/{placeId}/locatedIn"
        let placeIdPreEscape = "\(APIHelper.mapValueToPathItem(placeId))"
        let placeIdPostEscape = placeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{placeId}", with: placeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlaceResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get place time
     
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - returns: TimeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPlaceTimeUsingGET(placeId: String) async throws -> TimeResponse {
        return try await getPlaceTimeUsingGETWithRequestBuilder(placeId: placeId).execute().body
    }

    /**
     Get place time
     - GET /geo/places/{placeId}/time
     - Get place time
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - returns: RequestBuilder<TimeResponse> 
     */
    open class func getPlaceTimeUsingGETWithRequestBuilder(placeId: String) -> RequestBuilder<TimeResponse> {
        var localVariablePath = "/geo/places/{placeId}/time"
        let placeIdPreEscape = "\(APIHelper.mapValueToPathItem(placeId))"
        let placeIdPostEscape = placeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{placeId}", with: placeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TimeResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get place details
     
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: PopulatedPlaceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPlaceUsingGET(placeId: String, asciiMode: Bool? = nil, languageCode: String? = nil) async throws -> PopulatedPlaceResponse {
        return try await getPlaceUsingGETWithRequestBuilder(placeId: placeId, asciiMode: asciiMode, languageCode: languageCode).execute().body
    }

    /**
     Get place details
     - GET /geo/places/{placeId}
     - Get place details such as location coordinates, population, and elevation above sea-level (if available). 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter placeId: (path) A place id (either native &#39;id&#39; or &#39;wikiDataId&#39;) 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: RequestBuilder<PopulatedPlaceResponse> 
     */
    open class func getPlaceUsingGETWithRequestBuilder(placeId: String, asciiMode: Bool? = nil, languageCode: String? = nil) -> RequestBuilder<PopulatedPlaceResponse> {
        var localVariablePath = "/geo/places/{placeId}"
        let placeIdPreEscape = "\(APIHelper.mapValueToPathItem(placeId))"
        let placeIdPostEscape = placeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{placeId}", with: placeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PopulatedPlaceResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get region details
     
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter regionCode: (path) An ISO-3166 or FIPS region code 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: RegionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getRegionUsingGET(countryId: String, regionCode: String, asciiMode: Bool? = nil, languageCode: String? = nil) async throws -> RegionResponse {
        return try await getRegionUsingGETWithRequestBuilder(countryId: countryId, regionCode: regionCode, asciiMode: asciiMode, languageCode: languageCode).execute().body
    }

    /**
     Get region details
     - GET /geo/countries/{countryId}/regions/{regionCode}
     - Get country region details such as number of cities.
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter regionCode: (path) An ISO-3166 or FIPS region code 
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter languageCode: (query) Display results in this language (optional)
     - returns: RequestBuilder<RegionResponse> 
     */
    open class func getRegionUsingGETWithRequestBuilder(countryId: String, regionCode: String, asciiMode: Bool? = nil, languageCode: String? = nil) -> RequestBuilder<RegionResponse> {
        var localVariablePath = "/geo/countries/{countryId}/regions/{regionCode}"
        let countryIdPreEscape = "\(APIHelper.mapValueToPathItem(countryId))"
        let countryIdPostEscape = countryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{countryId}", with: countryIdPostEscape, options: .literal, range: nil)
        let regionCodePreEscape = "\(APIHelper.mapValueToPathItem(regionCode))"
        let regionCodePostEscape = regionCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{regionCode}", with: regionCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegionResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find country regions
     
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort regions.  Format: ±SORT_FIELD  where SORT_FIELD &#x3D; fipsCode | isoCode | name (optional)
     - returns: RegionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getRegionsUsingGET(countryId: String, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil) async throws -> RegionsResponse {
        return try await getRegionsUsingGETWithRequestBuilder(countryId: countryId, namePrefix: namePrefix, namePrefixDefaultLangResults: namePrefixDefaultLangResults, asciiMode: asciiMode, hateoasMode: hateoasMode, languageCode: languageCode, limit: limit, offset: offset, sort: sort).execute().body
    }

    /**
     Find country regions
     - GET /geo/countries/{countryId}/regions
     - Get the country's regions. These could be states, provinces, districts, or otherwise major political divisions. 
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter countryId: (path) An ISO-3166 country code or WikiData id 
     - parameter namePrefix: (query) Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name as it appears in that language.  (optional)
     - parameter namePrefixDefaultLangResults: (query) When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set.  (optional, default to true)
     - parameter asciiMode: (query) Display results using ASCII characters (optional, default to false)
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter languageCode: (query) Display results in this language (optional)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - parameter sort: (query) How to sort regions.  Format: ±SORT_FIELD  where SORT_FIELD &#x3D; fipsCode | isoCode | name (optional)
     - returns: RequestBuilder<RegionsResponse> 
     */
    open class func getRegionsUsingGETWithRequestBuilder(countryId: String, namePrefix: String? = nil, namePrefixDefaultLangResults: Bool? = nil, asciiMode: Bool? = nil, hateoasMode: Bool? = nil, languageCode: String? = nil, limit: Int? = nil, offset: Int? = nil, sort: String? = nil) -> RequestBuilder<RegionsResponse> {
        var localVariablePath = "/geo/countries/{countryId}/regions"
        let countryIdPreEscape = "\(APIHelper.mapValueToPathItem(countryId))"
        let countryIdPostEscape = countryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{countryId}", with: countryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "namePrefix": (wrappedValue: namePrefix?.encodeToJSON(), isExplode: false),
            "namePrefixDefaultLangResults": (wrappedValue: namePrefixDefaultLangResults?.encodeToJSON(), isExplode: false),
            "asciiMode": (wrappedValue: asciiMode?.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "languageCode": (wrappedValue: languageCode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegionsResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
