//
// LocaleAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LocaleAPI {

    /**
     Find currencies
     
     - parameter countryId: (query) Currencies for this country id 
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - returns: CurrenciesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCurrenciesUsingGET(countryId: String, hateoasMode: Bool? = nil, limit: Int? = nil, offset: Int? = nil) async throws -> CurrenciesResponse {
        return try await getCurrenciesUsingGETWithRequestBuilder(countryId: countryId, hateoasMode: hateoasMode, limit: limit, offset: offset).execute().body
    }

    /**
     Find currencies
     - GET /locale/currencies
     - Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter countryId: (query) Currencies for this country id 
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - returns: RequestBuilder<CurrenciesResponse> 
     */
    open class func getCurrenciesUsingGETWithRequestBuilder(countryId: String, hateoasMode: Bool? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CurrenciesResponse> {
        let localVariablePath = "/locale/currencies"
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryId": (wrappedValue: countryId.encodeToJSON(), isExplode: false),
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CurrenciesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get languages
     
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - returns: LanguagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getLanguagesUsingGET(hateoasMode: Bool? = nil, limit: Int? = nil, offset: Int? = nil) async throws -> LanguagesResponse {
        return try await getLanguagesUsingGETWithRequestBuilder(hateoasMode: hateoasMode, limit: limit, offset: offset).execute().body
    }

    /**
     Get languages
     - GET /locale/languages
     - Get all supported languages
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - returns: RequestBuilder<LanguagesResponse> 
     */
    open class func getLanguagesUsingGETWithRequestBuilder(hateoasMode: Bool? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<LanguagesResponse> {
        let localVariablePath = "/locale/languages"
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LanguagesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get locales
     
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - returns: LocalesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getLocalesUsingGET(hateoasMode: Bool? = nil, limit: Int? = nil, offset: Int? = nil) async throws -> LocalesResponse {
        return try await getLocalesUsingGETWithRequestBuilder(hateoasMode: hateoasMode, limit: limit, offset: offset).execute().body
    }

    /**
     Get locales
     - GET /locale/locales
     - Get all known locales
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - returns: RequestBuilder<LocalesResponse> 
     */
    open class func getLocalesUsingGETWithRequestBuilder(hateoasMode: Bool? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<LocalesResponse> {
        let localVariablePath = "/locale/locales"
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LocalesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get time-zone date-time
     
     - parameter zoneId: (path) A time-zone id 
     - returns: DateTimeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTimeZoneDateTimeUsingGET(zoneId: String) async throws -> DateTimeResponse {
        return try await getTimeZoneDateTimeUsingGETWithRequestBuilder(zoneId: zoneId).execute().body
    }

    /**
     Get time-zone date-time
     - GET /locale/timezones/{zoneId}/dateTime
     - Get time-zone date-time
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter zoneId: (path) A time-zone id 
     - returns: RequestBuilder<DateTimeResponse> 
     */
    open class func getTimeZoneDateTimeUsingGETWithRequestBuilder(zoneId: String) -> RequestBuilder<DateTimeResponse> {
        var localVariablePath = "/locale/timezones/{zoneId}/dateTime"
        let zoneIdPreEscape = "\(APIHelper.mapValueToPathItem(zoneId))"
        let zoneIdPostEscape = zoneIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{zoneId}", with: zoneIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DateTimeResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get time-zone time
     
     - parameter zoneId: (path) A time-zone id 
     - returns: TimeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTimeZoneTimeUsingGET(zoneId: String) async throws -> TimeResponse {
        return try await getTimeZoneTimeUsingGETWithRequestBuilder(zoneId: zoneId).execute().body
    }

    /**
     Get time-zone time
     - GET /locale/timezones/{zoneId}/time
     - Get time-zone time
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter zoneId: (path) A time-zone id 
     - returns: RequestBuilder<TimeResponse> 
     */
    open class func getTimeZoneTimeUsingGETWithRequestBuilder(zoneId: String) -> RequestBuilder<TimeResponse> {
        var localVariablePath = "/locale/timezones/{zoneId}/time"
        let zoneIdPreEscape = "\(APIHelper.mapValueToPathItem(zoneId))"
        let zoneIdPostEscape = zoneIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{zoneId}", with: zoneIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TimeResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get time-zone
     
     - parameter zoneId: (path) A time-zone id 
     - returns: TimeZoneResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTimeZoneUsingGET(zoneId: String) async throws -> TimeZoneResponse {
        return try await getTimeZoneUsingGETWithRequestBuilder(zoneId: zoneId).execute().body
    }

    /**
     Get time-zone
     - GET /locale/timezones/{zoneId}
     - Get time-zone
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter zoneId: (path) A time-zone id 
     - returns: RequestBuilder<TimeZoneResponse> 
     */
    open class func getTimeZoneUsingGETWithRequestBuilder(zoneId: String) -> RequestBuilder<TimeZoneResponse> {
        var localVariablePath = "/locale/timezones/{zoneId}"
        let zoneIdPreEscape = "\(APIHelper.mapValueToPathItem(zoneId))"
        let zoneIdPostEscape = zoneIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{zoneId}", with: zoneIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TimeZoneResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get time-zones
     
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - returns: TimeZonesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTimezonesUsingGET(hateoasMode: Bool? = nil, limit: Int? = nil, offset: Int? = nil) async throws -> TimeZonesResponse {
        return try await getTimezonesUsingGETWithRequestBuilder(hateoasMode: hateoasMode, limit: limit, offset: offset).execute().body
    }

    /**
     Get time-zones
     - GET /locale/timezones
     - Get all known time-zones
     - API Key:
       - type: apiKey X-RapidAPI-Key (HEADER)
       - name: UserSecurity
     - parameter hateoasMode: (query) Include HATEOAS-style links in results (optional, default to true)
     - parameter limit: (query) The maximum number of results to retrieve (optional, default to 10)
     - parameter offset: (query) The zero-ary offset index into the results (optional, default to 0)
     - returns: RequestBuilder<TimeZonesResponse> 
     */
    open class func getTimezonesUsingGETWithRequestBuilder(hateoasMode: Bool? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<TimeZonesResponse> {
        let localVariablePath = "/locale/timezones"
        let localVariableURLString = CitiesAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hateoasMode": (wrappedValue: hateoasMode?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TimeZonesResponse>.Type = CitiesAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
